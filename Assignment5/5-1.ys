# Execution begins at address 0 
    .pos 0
    irmovq stack, %rsp      # Set up stack pointer
    call main       # Execute main program
    halt            # Terminate program 

# Array of 10 elements\par
   array:
	.quad 0x000000000001
	.quad 0x000000000002
	.quad 0x000000000003
	.quad 0x000000000004
	.quad 0x000000000005
	.quad 0x000000000006
	.quad 0x000000000007
	.quad 0x000000000009
	.quad 0x000000000010

swap:
    mrmovq (%rdi), %rax
    mrmovq (%rsi), %rdx
    rmmovq %rdx, (%rdi)
    rmmovq %rax, (%rsi)


main:
    irmovq array,%rdi
    irmovq $10,%rsi
    call sort

sort:

    pushq %rdx      # *array
    pushq %rax      # n
    pushq %rbx      # i
    pushq %rsi      # min
    pushq %rdi      # j
    pushq %r8       # inc
    
    irmovq $1, %r8     # %r8 = 1
    irmovq $0, %rbx     
    irmovq $10, %rbx     #%rdi = 1
    
    subq %rax ,%r8       # n-1
    
loop_outer:
    
    pushq %rbx
    subq  %rax, %rbx #compare
    popq  %rbx
    
    jne  exit

    mrmovq (%rsi), %rbx
    
    
loop_inner:

    addq %rbx,%r8       #i++
    mrmovq (%rdi),%rbx  
    
    pushq %rax
    subq  %rdi, %rax
    popq  %rax
    
    jmp  loop_outer
    
    addq %rbx,%r8
    addq %rdi,%r8
    cmovl %rdx,%rdx     #compare for swap
 
    call    swap
    
    addq %rdi,%r8
    
stack:
